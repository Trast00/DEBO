<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>DeboInfo Server Dashbord</title>
  <link rel="stylesheet" href="/css/style.css">
  <link rel="stylesheet" href="/css/dashboard.css">
  <link rel="stylesheet" href="/css/tenders.css">
</head>
<body class="dashboard flex-center bg-secondary-light">
  <% 
  /** small notification p */ 
  %>
  <p class="notification success">Success</p>
  <p class="notification fail">Failur</p>
  <% 
  /** writte me the html to made the tender post, get, getId, delete, update request each in different form: 
  this.title = title
  this.description = description
  this.country = country
  this.industryType = industryType
  this.dates = dates
  this.buyer = buyer
  this.pdfUrl = pdfUrl
  this.tags = tags
  this.budget = budget */ 
  %>

  <div class="dev-log-wrapper form-search-default">
    <h2>Response</h2>
    <p id="show-response">Response value appear here</p>
  </div>

  <div class="dev-log-wrapper form-search-default">
    <h2>Post Tender</h2>
    <form method="POST" action="/tenders">
      <input type="text" name="title" placeholder="Title" required minlength="3">
      <select name="country" required>
        <% listCountries.forEach(function(industry) { %>
          <option value="<%= industry.name %>"><%= industry.name %></option>
      <% }); %>
      </select>
      <select name="industryType" id="industry-select" required>
        <option value="">Select a industry type</option>
        <% listIndustries.forEach(function(industry) { %>
            <option value="<%= industry.name %>"><%= industry.name %></option>
        <% }); %>
      </select>
      <input type="date" name="datesPublish" placeholder="Publication Dates" required>
      <input type="date" name="datesExpiration" placeholder="Expiration Dates" required>
      <input type="text" name="buyer" placeholder="Buyer" required>
      <input type="url" name="pdfUrl" placeholder="PdfUrl" required>
      <input type="text" name="tags" placeholder="tag1,tag2 (separer par une ,) (ex: tag1,tag2)" required>
      <input type="number" name="budget" placeholder="Budget" min="1" step="0.01">
      <input type="text" name="currency" placeholder="Budget currency" >
      <textarea type="text" name="description" placeholder="Description" required minlength="10"></textarea>

      <input type="hidden" name="moderator-email" value=<%= email %>>
      <input type="hidden" name="moderator-password" value=<%= password %>>
      <input type="hidden" name="moderator-credential" value=<%= credential %>>
      <button type="submit">Post</button>
    </form>
  </div>
  <div class="dev-log-wrapper form-search-default">    
    <h2>Get Tender</h2>
    <form method="GET" action="/tenders">
      <input type="hidden" name="moderator-email" value=<%= email %>>
      <input type="hidden" name="moderator-password" value=<%= password %>>
      <input type="hidden" name="moderator-credential" value=<%= credential %>>
  
      <button type="submit">Get</button>
    </form>
  </div>
  <div class="dev-log-wrapper form-search-default">
    <h2>Get Tender by Id</h2>
    <form method="GET" action="/tenders/:id">
      <input type="text" name="id" placeholder="Id" required>
      
      <input type="hidden" name="moderator-email" value=<%= email %>>
      <input type="hidden" name="moderator-password" value=<%= password %>>
      <input type="hidden" name="moderator-credential" value=<%= credential %>>
      <button type="submit">Get</button>
    </form>
  </div>
  <div class="dev-log-wrapper form-search-default">
    <h2>Update Tender</h2>
    <form method="PUT" action="/tenders/:id">
      <input type="text" name="id" placeholder="id" required minlength="3">
      <input type="text" name="title" placeholder="Title" required minlength="3">
      <select name="country" required>
        <option value="">Select a Country</option>
        <option value="Benin">Benin</option>
        <option value="Burkina Faso">Burkina Faso</option>
        <option value="Côte d'Ivoire">Côte d'Ivoire</option>
        <option value="Guinea-Bissau">Guinea-Bissau</option>
        <option value="Mali">Mali</option>
        <option value="Niger">Niger</option>
        <option value="Senegal">Senegal</option>
        <option value="Togo">Togo</option>
      </select>
      <select name="industryType" id="industry-select" required>
        <option value="">Select a industry type</option>
        <% listIndustries.forEach(function(industry) { %>
            <option value="<%= industry.name %>"><%= industry.name %></option>
        <% }); %>
      </select>
      <input type="date" name="datesPublish" placeholder="Publication Dates" required>
      <input type="date" name="datesExpiration" placeholder="Expiration Dates" required>
      <input type="text" name="buyer" placeholder="Buyer" required>
      <input type="url" name="pdfUrl" placeholder="PdfUrl" required>
      <input type="text" name="tags" placeholder="Tags" required>
      <input type="number" name="budget" placeholder="Budget" min="1" step="0.01">
      <input type="text" name="currency" placeholder="Budget currency">
      <textarea type="text" name="description" placeholder="Description" required minlength="10"></textarea>
      
      <input type="hidden" name="moderator-email" value=<%= email %>>
      <input type="hidden" name="moderator-password" value=<%= password %>>
      <input type="hidden" name="moderator-credential" value=<%= credential %>>
      <button type="submit">Update</button>
    </form>
  </div>
  <div class="dev-log-wrapper form-search-default">
    <h2>Delete Tender</h2>
    <form method="DELETE" action="/tenders/:id">
      <input type="text" name="id" placeholder="Id" required>
      
      <input type="hidden" name="moderator-email" value=<%= email %>>
      <input type="hidden" name="moderator-password" value=<%= password %>>
      <input type="hidden" name="moderator-credential" value=<%= credential %>>
      <button type="submit">Delete</button>
    </form>
  </div>
  <div class="dev-log-wrapper form-search-default response">
    <p>Nothing else to see</p>
  </div>

  <% /* Add form for adding and getting and deleting IndustryType */ %>
  <div class="dev-log-wrapper form-search-default">
    <h2>Post IndustryType</h2>
    <form method="POST" action="/industryTypes">
      <input type="text" name="name" placeholder="IndustryType" required>
      <textarea type="text" name="description" placeholder="IndustryType description" required minlength="10"></textarea>
      <input type="hidden" name="moderator-email" value=<%= email %>>
      <input type="hidden" name="moderator-password" value=<%= password %>>
      <input type="hidden" name="moderator-credential" value=<%= credential %>>
      <button type="submit">Post</button>
    </form>
  </div>
  <div class="dev-log-wrapper form-search-default">    
    <h2>Get IndustryType</h2>
    <form method="GET" action="/industryTypes">
      <input type="hidden" name="moderator-email" value=<%= email %>>
      <input type="hidden" name="moderator-password" value=<%= password %>>
      <input type="hidden" name="moderator-credential" value=<%= credential %>>
  
      <button type="submit">Get</button>
    </form>
  </div>
  <div class="dev-log-wrapper form-search-default">
    <h2>Get IndustryType by Name</h2>
    <form method="GET" action="/industryTypes/:name">
      <input type="text" name="name" placeholder="name" required>
      <input type="hidden" name="moderator-email" value=<%= email %>>
      <input type="hidden" name="moderator-password" value=<%= password %>>
      <input type="hidden" name="moderator-credential" value=<%= credential %>>
      <button type="submit">Get</button>
    </form>
  </div>
  <div class="dev-log-wrapper form-search-default">
    <h2>Delete IndustryType By Name</h2>
    <form method="DELETE" action="/industryTypes">
      <input type="text" name="name" placeholder="Industry name" required>
      
      <input type="hidden" name="moderator-email" value=<%= email %>>
      <input type="hidden" name="moderator-password" value=<%= password %>>
      <input type="hidden" name="moderator-credential" value=<%= credential %>>
      <button type="submit">Delete</button>
    </form>
  </div>

  <div class="dev-log-wrapper form-search-default">
    <h2>Get All Premuim Users</h2>
    <form method="GET" action="/users/premuims">
      <input type="hidden" name="moderator-email" value=<%= email %>>
      <input type="hidden" name="moderator-password" value=<%= password %>>
      <input type="hidden" name="moderator-credential" value=<%= credential %>>
      <button type="submit">Get</button>
    </form>
  </div>
  <div class="dev-log-wrapper form-search-default">
    <h2>Add a Premuim Users</h2>
    <p>If the user already exist it will be updated</p>
    <form method="POST" action="/users/premuims">
      <input type="text" name="name" placeholder="name" required>
      <input type="email" name="email" placeholder="user email" required>
      <input type="date" name="premuimEndDate" placeholder="premuimEndDate" required>
      <input type="text" name="note" placeholder="note (optional)">

      <input type="hidden" name="moderator-email" value=<%= email %>>
      <input type="hidden" name="moderator-password" value=<%= password %>>
      <input type="hidden" name="moderator-credential" value=<%= credential %>>
      <button type="submit">Add/Update</button>
    </form>
  </div>

</body>

<script>
  // send request in json format
  const forms = document.querySelectorAll('form');
  forms.forEach(form => {
    form.addEventListener('submit', async (e) => {
      e.preventDefault();

      const method = form.getAttribute('method').toUpperCase();
      const action = form.getAttribute('action');
      const formData = new FormData(form);
      const data = Object.fromEntries(formData);
      const isDataCorrect = checkFormData(data);
      if (!isDataCorrect) return;
      updateDataFormat(data)
      const actionUrl = updateDataAction(action, data);

      let result = "Error"
      let isSuccess = false;
      if (method === 'GET') {
        const response = await fetch(actionUrl);
        isSuccess = (response.status >= 200 && response.status < 400)
        result = await response.json();
      } else {
        const response = await fetch(actionUrl, {
          method: method,
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(data)
        });
        isSuccess = (response.status >= 200 && response.status < 400)
        result = await response.json();
      }
      showNotification(isSuccess);
      if (isSuccess) {
        //show reponse
        document.getElementById('show-response').innerText = JSON.stringify(result);
        //form.reset();
      }
    });
  });
  //function that show notification for 5 seconds
  const showNotification = (isSucces) => {
    // show .notification.success or .notification.fail
    const notification = document.querySelector(`.notification.${isSucces ? 'success' : 'fail'}`);
    notification.style.display = 'block';
    setTimeout(() => {
      notification.style.display = 'none';
    }, 5000);
  }

  const checkFormData = (formData) => {
    // if the data exist, it should be validated

    // date should be a date forma
    if (formData.datesPublish && !new Date(formData.datesPublish)) {
      alert('datesPublish should be a date format');
      return false;
    }
    // none of the data should contains line of code
    for (const key in formData) {
      if (formData[key].includes('<') || formData[key].includes('>')) {
        alert('data should not contain < or >');
        return false;
      }
    }
    // data should not contains SQL command
    const sqlCommands = []//['SELECT', 'INSERT', 'UPDATE', 'DELETE', 'DROP', 'CREATE', 'ALTER', 'TRUNCATE', 'RENAME', 'REPLACE', 'JOIN', 'UNION', 'FROM', 'WHERE', 'SET', 'ORDER', 'BY', 'GROUP', 'HAVING', 'LIMIT', 'OFFSET', 'AS', 'ON', 'AND', 'OR', 'NOT', 'IN', 'LIKE', 'IS', 'NULL', 'BETWEEN', 'EXISTS', 'ALL', 'ANY', 'SOME', 'CASE', 'WHEN', 'THEN', 'ELSE', 'END', 'AS', 'ASC', 'DESC', 'INNER', 'OUTER', 'LEFT', 'RIGHT', 'FULL', 'CROSS', 'NATURAL', 'USING', 'ADD', 'MODIFY', 'CHANGE', 'COLUMN', 'INDEX', 'KEY', 'PRIMARY', 'FOREIGN', 'CHECK', 'REFERENCES', 'CONSTRAINT', 'DEFAULT', 'AUTO_INCREMENT', 'UNIQUE', 'SHOW', 'DESCRIBE', 'DESC', 'USE', 'DATABASE', 'DATABASES', 'TABLE', 'TABLES', 'COLUMN', 'COLUMNS', 'INDEX', 'INDEXES', 'STATUS', 'VARIABLES', 'VARIABLE', 'GLOBAL', 'SESSION', 'PROCEDURE', 'FUNCTION', 'TRIGGER', 'EVENT', 'CREATE', 'ALTER', 'DROP', 'RENAME', 'TRUNCATE', 'REPLACE', 'DELETE', 'INSERT', 'UPDATE', 'SET', 'WHERE', 'ORDER', 'BY', 'GROUP', 'HAVING', 'LIMIT', 'OFFSET', 'AS', 'ON', 'AND', 'OR', 'NOT', 'IN', 'LIKE', 'IS', 'NULL', 'BETWEEN', 'EXISTS', 'ALL', 'ANY', 'SOME', 'CASE', 'WHEN', 'THEN', 'ELSE', 'END', 'AS', 'ASC', 'DESC', 'INNER', 'OUTER', 'LEFT', 'RIGHT', 'FULL', 'CROSS', 'NATURAL', 'USING', 'ADD', 'MODIFY', 'CHANGE', 'COLUMN', 'INDEX', 'KEY', 'PRIMARY', 'FOREIGN', 'CHECK', 'REFERENCES', 'CONSTRAINT', 'DEFAULT', 'AUTO_INCREMENT', 'UNIQUE', 'SHOW', 'DESCRIBE', 'DESC', 'USE', 'DATABASE', 'DATABASES', 'TABLE', 'TABLES', 'COLUMN', 'COLUMNS', 'INDEX', 'INDEXES', 'STATUS', 'VARIABLES', 'VARIABLE', 'GLOBAL', 'SESSION', 'PROCEDURE', 'FUNCTION', 'TRIGGER', 'EVENT', 'CREATE', 'ALTER', 'DROP', 'RENAME', 'TRUNCATE', 'REPLACE', 'DELETE', 'INSERT', 'UPDATE', 'SET', 'WHERE', 'ORDER', 'BY', 'GROUP', 'HAVING', 'LIMIT', 'OFFSET', 'AS', 'ON', 'AND', 'OR', 'NOT', 'IN', 'LIKE', 'IS', 'NULL', 'BETWEEN', 'EXISTS', 'ALL', 'ANY', 'SOME', 'CASE', 'WHEN', 'THEN', 'ELSE', 'END', 'AS', 'ASC', 'DESC', 'INNER', 'OUTER', 'LEFT', 'RIGHT', 'FULL', 'CROSS', 'NATURAL', 'USING', 'ADD', 'MODIFY', 'CHANGE', 'COLUMN', 'INDEX', 'KEY', 'PRIMARY', 'FOREIGN', 'CHECK', 'REFERENCES', 'CONSTRAINT', 'DEFAULT', 'AUTO_INCREMENT', 'UNIQUE', 'SHOW', 'DESCRIBE', 'DESC', 'USE', 'DATABASE', 'DATABASES', 'TABLE', 'TABLES', 'COLUMN', 'COLUMNS', 'INDEX', 'INDEXES', 'STATUS', 'VARIABLES', 'VARIABLE', 'GLOBAL', 'SESSION', 'PROCEDURE', 'FUNCTION', 'TRIGGER', 'EVENT', 'CREATE', 'ALTER', 'DROP', 'RENAME', 'TRUNCATE', 'REPLACE', 'DELETE', 'INSERT', 'UPDATE', 'SET', 'WHERE', 'ORDER', 'BY', 'GROUP', 'HAVING', 'LIMIT', 'OFFSET', 'AS', 'ON', 'AND', 'OR', 'NOT', 'IN', 'LIKE', 'IS', 'NULL', 'BETWEEN', 'EXISTS', 'ALL', 'ANY', 'SOME', 'CASE', 'WHEN', 'THEN', 'ELSE', 'END', 'AS', 'ASC', 'DESC', 'INNER', 'OUTER', 'LEFT', 'RIGHT', 'FULL', 'CROSS'];
    for (const key in formData) {
      for (const command of sqlCommands) {
        if (formData[key].includes(command)) {
          alert(`data ${key} should not contain SQL command`);
          return false;
        }
      }
    }

    return true;
  }

  const updateDataFormat = (data) => {
    if (data.datesPublish && data.datesExpiration) {
      updateDataDatesFormat(data)
    }
    if (data.budget) {
      data.budget.value = parseFloat(data.budget)
      data.budget.currency = data.currency
    }
    if (data.tags) {
      data.tags = data.tags.split(',').map(tag => tag.trim())
    }
  }

  const updateDataDatesFormat = (data) => {
    // update the date format to be a date object
    // put publish and expire inside date (data.dates.publish data.dates.publish ) and remove datePublish and dateExpire
    if (data.datesPublish) {
      data.dates = {
        publish: new Date(data.datesPublish),
        expire: new Date(data.datesExpiration)
      }
      
      delete data.datesPublish;
      delete data.datesExpiration;
    }
  }

  const updateDataAction = (action, data) => {
    // update the action url to include the id if it exist
    if (action.includes(':id')) {
      action = action.replace(':id', data.id);
      delete data.id;
    }
    if (action.includes(':name')) {
      action = action.replace(':name', data.name);
      delete data.name;
    }
    return action;
  }
</script>

</html>